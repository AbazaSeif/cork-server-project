#!/usr/bin/env python
import os
import sys
from jinja2 import Template, Environment, FileSystemLoader


EXIT = """There's a Dockerfile here that is not generated by cork.
This cork build can't continue.
"""

CORK_TEMPLATES_DIR = '/cork/templates'

def is_executable(f):
    return os.path.isfile(f) and os.access(f, os.X_OK)

def main():
    cork_work_dir = os.environ['CORK_WORK_DIR']
    docker_repo = os.environ['CORK_PARAM_BASE_DOCKER_REPO']
    docker_tag = os.environ['CORK_PARAM_BASE_DOCKER_TAG']
    dockerfile_path = os.path.join(cork_work_dir, 'Dockerfile')
    cork_setup_dir = os.path.join(cork_work_dir, 'setup')

    jinja_env = Environment(
        loader=FileSystemLoader(CORK_TEMPLATES_DIR)
    )
    
    if os.path.isfile(dockerfile_path):
        # If the current dockerfile doesn't have a `Generated by cork. Do not
        # commit` disclaimer then this build isn't supported
        current_dockerfile = open(dockerfile_path)
        first_line = current_dockerfile.next()
        current_dockerfile.close()

        if not first_line.startswith('# Generated by cork'):
            print(EXIT)
            sys.exit(1)

    setup_files = []
    if os.path.isdir(cork_setup_dir):
        cork_server_setup_path = os.path.join(cork_work_dir, 'cork-server-setup')

        setup_files = os.listdir(cork_setup_dir)
        setup_files.sort()
        setup_files = filter(is_executable, map(lambda a: os.path.join(cork_setup_dir, a), setup_files))
        setup_files = map(lambda a: os.path.join('/cork-setup', a), map(os.path.basename, setup_files))

    template = jinja_env.get_template('Dockerfile.jinja2')
    rendered_dockerfile = template.render(
        docker_repo=docker_repo,
        docker_tag=docker_tag,
        has_cork_server_setup=len(setup_files) > 0,
        setup_files=setup_files,
    )

    dockerfile = open(dockerfile_path, 'w')
    dockerfile.write(rendered_dockerfile)
    dockerfile.close()

if __name__ == '__main__':
    main()
